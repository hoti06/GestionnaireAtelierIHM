<?php

namespace Atelier\ProductBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Product
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="Atelier\ProductBundle\Entity\ProductRepository")
 * @UniqueEntity(fields="name", message="There is already a product with this name.")
 */
class Product
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255, unique=true)
     * @Assert\NotBlank() 
     */
    private $name;


	/**
     * @var text
     *
     * @ORM\Column(name="description", type="text", nullable=true)
     */
    private $description;
	
	/**
	* @ORM\ManyToOne(targetEntity="Atelier\CategoryBundle\Entity\Category", inversedBy="products")
	* @ORM\JoinColumn(nullable=false)
	*/
	private $category;
	
	
	
	
	/**
	* @ORM\OneToMany(targetEntity="Atelier\MaterialBundle\Entity\Material", mappedBy="product", cascade={"remove"})
	*/
	private $materials; 
	
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Product
     */
    public function setName($name)
    {
        $this->name = $name;
    
        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set description
     *
     * @param string $description
     * @return Product
     */
    public function setDescription($description)
    {
        $this->description = $description;
    
        return $this;
    }

    /**
     * Get description
     *
     * @return string 
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set category
     *
     * @param \Atelier\CategoryBundle\Entity\Category $category
     * @return Product
     */
    public function setCategory(\Atelier\CategoryBundle\Entity\Category $category)
    {
        $this->category = $category;
    
        return $this;
    }

    /**
     * Get category
     *
     * @return \Atelier\CategoryBundle\Entity\Category 
     */
    public function getCategory()
    {
        return $this->category;
    }
}
